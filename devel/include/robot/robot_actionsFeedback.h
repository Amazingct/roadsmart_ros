// Generated by gencpp from file robot/robot_actionsFeedback.msg
// DO NOT EDIT!


#ifndef ROBOT_MESSAGE_ROBOT_ACTIONSFEEDBACK_H
#define ROBOT_MESSAGE_ROBOT_ACTIONSFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot
{
template <class ContainerAllocator>
struct robot_actionsFeedback_
{
  typedef robot_actionsFeedback_<ContainerAllocator> Type;

  robot_actionsFeedback_()
    : current_long(0.0)
    , current_lat(0.0)  {
    }
  robot_actionsFeedback_(const ContainerAllocator& _alloc)
    : current_long(0.0)
    , current_lat(0.0)  {
  (void)_alloc;
    }



   typedef float _current_long_type;
  _current_long_type current_long;

   typedef float _current_lat_type;
  _current_lat_type current_lat;





  typedef boost::shared_ptr< ::robot::robot_actionsFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot::robot_actionsFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct robot_actionsFeedback_

typedef ::robot::robot_actionsFeedback_<std::allocator<void> > robot_actionsFeedback;

typedef boost::shared_ptr< ::robot::robot_actionsFeedback > robot_actionsFeedbackPtr;
typedef boost::shared_ptr< ::robot::robot_actionsFeedback const> robot_actionsFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot::robot_actionsFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot::robot_actionsFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot::robot_actionsFeedback_<ContainerAllocator1> & lhs, const ::robot::robot_actionsFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.current_long == rhs.current_long &&
    lhs.current_lat == rhs.current_lat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot::robot_actionsFeedback_<ContainerAllocator1> & lhs, const ::robot::robot_actionsFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot::robot_actionsFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot::robot_actionsFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot::robot_actionsFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot::robot_actionsFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot::robot_actionsFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot::robot_actionsFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot::robot_actionsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02a7c0fb9633ae41b2997d7c1088daa1";
  }

  static const char* value(const ::robot::robot_actionsFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02a7c0fb9633ae41ULL;
  static const uint64_t static_value2 = 0xb2997d7c1088daa1ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot::robot_actionsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot/robot_actionsFeedback";
  }

  static const char* value(const ::robot::robot_actionsFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot::robot_actionsFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# define feedback\n"
"float32 current_long\n"
"float32 current_lat\n"
"\n"
"\n"
;
  }

  static const char* value(const ::robot::robot_actionsFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot::robot_actionsFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.current_long);
      stream.next(m.current_lat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_actionsFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot::robot_actionsFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot::robot_actionsFeedback_<ContainerAllocator>& v)
  {
    s << indent << "current_long: ";
    Printer<float>::stream(s, indent + "  ", v.current_long);
    s << indent << "current_lat: ";
    Printer<float>::stream(s, indent + "  ", v.current_lat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MESSAGE_ROBOT_ACTIONSFEEDBACK_H
