// Generated by gencpp from file robot/robot_actionsGoal.msg
// DO NOT EDIT!


#ifndef ROBOT_MESSAGE_ROBOT_ACTIONSGOAL_H
#define ROBOT_MESSAGE_ROBOT_ACTIONSGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot
{
template <class ContainerAllocator>
struct robot_actionsGoal_
{
  typedef robot_actionsGoal_<ContainerAllocator> Type;

  robot_actionsGoal_()
    : longitude(0.0)
    , latitude(0.0)  {
    }
  robot_actionsGoal_(const ContainerAllocator& _alloc)
    : longitude(0.0)
    , latitude(0.0)  {
  (void)_alloc;
    }



   typedef float _longitude_type;
  _longitude_type longitude;

   typedef float _latitude_type;
  _latitude_type latitude;





  typedef boost::shared_ptr< ::robot::robot_actionsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot::robot_actionsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct robot_actionsGoal_

typedef ::robot::robot_actionsGoal_<std::allocator<void> > robot_actionsGoal;

typedef boost::shared_ptr< ::robot::robot_actionsGoal > robot_actionsGoalPtr;
typedef boost::shared_ptr< ::robot::robot_actionsGoal const> robot_actionsGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot::robot_actionsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot::robot_actionsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot::robot_actionsGoal_<ContainerAllocator1> & lhs, const ::robot::robot_actionsGoal_<ContainerAllocator2> & rhs)
{
  return lhs.longitude == rhs.longitude &&
    lhs.latitude == rhs.latitude;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot::robot_actionsGoal_<ContainerAllocator1> & lhs, const ::robot::robot_actionsGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot::robot_actionsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot::robot_actionsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot::robot_actionsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot::robot_actionsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot::robot_actionsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot::robot_actionsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot::robot_actionsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "826f8fcadfa8742a6495798d3978624a";
  }

  static const char* value(const ::robot::robot_actionsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x826f8fcadfa8742aULL;
  static const uint64_t static_value2 = 0x6495798d3978624aULL;
};

template<class ContainerAllocator>
struct DataType< ::robot::robot_actionsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot/robot_actionsGoal";
  }

  static const char* value(const ::robot::robot_actionsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot::robot_actionsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# define goals (longitude and latitutude)\n"
"float32 longitude\n"
"float32 latitude\n"
"\n"
;
  }

  static const char* value(const ::robot::robot_actionsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot::robot_actionsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.longitude);
      stream.next(m.latitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_actionsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot::robot_actionsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot::robot_actionsGoal_<ContainerAllocator>& v)
  {
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MESSAGE_ROBOT_ACTIONSGOAL_H
